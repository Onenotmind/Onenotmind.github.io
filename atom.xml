<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yaroku&#39;s Blog Page</title>
  
  <subtitle>Blog for Code &amp; Life!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://onenotmind.github.io/"/>
  <updated>2020-05-23T06:57:44.382Z</updated>
  <id>https://onenotmind.github.io/</id>
  
  <author>
    <name>Yaroku</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue2 Vuex</title>
    <link href="https://onenotmind.github.io/2020/05/23/vue2-vuex/"/>
    <id>https://onenotmind.github.io/2020/05/23/vue2-vuex/</id>
    <published>2020-05-23T06:57:44.382Z</published>
    <updated>2020-05-23T06:57:44.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VUEX"><a href="#VUEX" class="headerlink" title="VUEX"></a>VUEX</h1><h2 id="shared-object"><a href="#shared-object" class="headerlink" title="shared object"></a>shared object</h2><p>if we want to have a shared object in more reuseful vue component.we can get the object out like this.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  count: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line">  &#125;,</span><br><span class="line">  render (h) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, <span class="keyword">this</span>.count)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; Counter &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="shared-object-to-be-reactivity"><a href="#shared-object-to-be-reactivity" class="headerlink" title="shared object to be reactivity"></a>shared object to be reactivity</h2><p>if <code>count</code> can be reactivity, using Vue, we know the data defined in vue is reactivity. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"inc"</span>&gt;</span>inc<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> state = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> () &#123;</span></span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    inc () &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.count++</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> Counter = &#123;</span></span><br><span class="line">  render (h) &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> h(<span class="string">'div'</span>, state.count)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  components: &#123; Counter &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    inc () &#123;</span><br><span class="line">      state.inc()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>we can change the syntax style. make it more like vuex syntax</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"inc"</span>&gt;</span>inc<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span> <span class="params">(&#123; state, mutations &#125;)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">return</span> <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">    data: &#123; state &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      commit (mutationType) &#123;</span><br><span class="line"><span class="actionscript">        mutations[mutationType](<span class="keyword">this</span>.state)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> store = createStore(&#123;</span></span><br><span class="line">  state: &#123; count: 0 &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    inc (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> Counter = &#123;</span></span><br><span class="line">  render (h) &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> h(<span class="string">'div'</span>, store.state.count)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  components: &#123; Counter &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    inc () &#123;</span><br><span class="line"><span class="actionscript">      store.commit(<span class="string">'inc'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;VUEX&quot;&gt;&lt;a href=&quot;#VUEX&quot; class=&quot;headerlink&quot; title=&quot;VUEX&quot;&gt;&lt;/a&gt;VUEX&lt;/h1&gt;&lt;h2 id=&quot;shared-object&quot;&gt;&lt;a href=&quot;#shared-object&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="vue" scheme="https://onenotmind.github.io/tags/vue/"/>
    
      <category term="vue2" scheme="https://onenotmind.github.io/tags/vue2/"/>
    
      <category term="vuex" scheme="https://onenotmind.github.io/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 Render</title>
    <link href="https://onenotmind.github.io/2020/05/23/vue2-render/"/>
    <id>https://onenotmind.github.io/2020/05/23/vue2-render/</id>
    <published>2020-05-23T06:57:44.381Z</published>
    <updated>2020-05-23T06:57:44.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Render"><a href="#Render" class="headerlink" title="Render"></a>Render</h1><h2 id="what’s-render-include-DOM-and-virtual-DOM"><a href="#what’s-render-include-DOM-and-virtual-DOM" class="headerlink" title="what’s render?(include DOM and virtual DOM)"></a>what’s render?(include DOM and virtual DOM)</h2><p>Let’s see the Vue Reactivity System.</p><p><img src="../IMAGES/vue2-render-renderSystem.png" alt="Vue Reactivity System"></p><p>In Vue2, Template (when we write *.vue file) it would be</p><p>-&gt; (compiled into) Render Function</p><p>-&gt; (returns) Virtual DOM</p><p>-&gt; (generates) Actual DOM</p><p>so, what’s diffirence between Virtual DOM and Actual DOM</p><blockquote><p>Actual DOM</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"[Object HTMLDivElement]"</span> Browser Native <span class="built_in">Object</span> (expensive)</span><br></pre></td></tr></table></figure><blockquote><p>Virtual DOM</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vm.$createElement(<span class="string">'div'</span>)</span><br><span class="line">&#123; <span class="attr">tag</span>: <span class="string">'div'</span>, <span class="attr">data</span>: &#123; <span class="attr">attrs</span>: &#123;&#125;&#125;, <span class="attr">children</span>: [] &#125; Plain Javascript <span class="built_in">Object</span> (cheap)</span><br></pre></td></tr></table></figure><p>As picture shows, vue2 use Component Render Function to generate Virtual DOM Tree, so we should understand Component Render Function first if we want to understand whole Vue Render System.</p><h2 id="Vue-Render-Function-API-usage"><a href="#Vue-Render-Function-API-usage" class="headerlink" title="Vue Render Function API usage"></a>Vue Render Function API usage</h2><p>Render Function <code>h()</code> in Vue is the Key Function to render DOM.</p><p>there are basic usages below.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">h(<span class="string">'div'</span>, <span class="string">'some text'</span>)</span><br><span class="line"></span><br><span class="line">h(<span class="string">'div'</span>, &#123; <span class="attr">class</span>: <span class="string">'foo'</span> &#125;, <span class="string">'some text'</span> )</span><br><span class="line"></span><br><span class="line">h(<span class="string">'div'</span> &#123; &#125;, [</span><br><span class="line">  <span class="string">'some text'</span>,</span><br><span class="line">  h(<span class="string">'span'</span>, <span class="string">'bar'</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><blockquote><p>h can directly render a component</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MyComponent <span class="keyword">from</span> <span class="string">'...'</span></span><br><span class="line"></span><br><span class="line">h(MyComponent, &#123;</span><br><span class="line">  props: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## Render Exercise in Vue2.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### EXERCISE render tags</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Implement the 'example' component which given the following usage:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>html</span><br><span class="line">&lt;example :tags=<span class="string">"['h1', 'h2', 'h3']"</span>&gt;&lt;<span class="regexp">/example&gt;</span></span><br></pre></td></tr></table></figure><p>which renders the expected output:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>0<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>2<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Solution</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">example</span> <span class="attr">:tags</span>=<span class="string">"['h1', 'h2', 'h3']"</span>&gt;</span><span class="tag">&lt;/<span class="name">example</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'example'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">'tags'</span>]</span></span><br><span class="line">    render (h) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> h(<span class="string">'div'</span>, <span class="keyword">this</span>.tags.map(<span class="function">(<span class="params">tag, i</span>) =&gt;</span> h(tag, i)))</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>if example is a functional component, code may write like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'example'</span>, &#123;</span><br><span class="line">  props: [<span class="string">'tags'</span>]</span><br><span class="line">  functional: <span class="literal">true</span>,</span><br><span class="line">  render (h, context) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, context.props.tags.map(<span class="function">(<span class="params">tag, i</span>) =&gt;</span> h(tag, i)))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="EXERCISE-render-Component"><a href="#EXERCISE-render-Component" class="headerlink" title="EXERCISE render Component"></a>EXERCISE render Component</h3><ul><li><p>Implement a Foo component wihich simple render <code>&lt;div&gt;foo&lt;/div&gt;</code>, and a Bar component which simple renders <code>&lt;div&gt;bar&lt;/div&gt;</code> (using render function obviously)</p></li><li><p>Implement an <example> component which renders the Foo component or the Bar component based on its <code>ok</code> prop. For <example> if ok is true, the final renderd dom should be <code>&lt;div&gt;foo&lt;/div&gt;</code></p></li><li><p>Implement a button in the root component that toggles <code>&lt;example&gt;</code> between <code>Foo</code> and <code>Bar</code> by controlling its <code>ok</code> prop.</p></li></ul><blockquote><p>Solution</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">example</span> <span class="attr">:ok</span>=<span class="string">"ok"</span>&gt;</span><span class="tag">&lt;/<span class="name">example</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"ok = !ok"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Foo = &#123;</span></span><br><span class="line"><span class="javascript">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(<span class="string">'div'</span>, <span class="string">'foo'</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Bar = &#123;</span></span><br><span class="line"><span class="javascript">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(<span class="string">'div'</span>, <span class="string">'bar'</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'example'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">'ok'</span>]</span></span><br><span class="line">    render (h) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.ok ? h(Foo) : h(Bar)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">    data: &#123; ok: <span class="literal">true</span> &#125;</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="EXERCISE-Higher-Order-Component"><a href="#EXERCISE-Higher-Order-Component" class="headerlink" title="EXERCISE Higher Order Component"></a>EXERCISE Higher Order Component</h3><ul><li><p>Implement a withAvatarURL helper which takes an inner component that expects a <code>url</code> prop, and return a higher-order component that accepts a <code>username</code> prop instead. The higher-order component should be responsible for fetching the curresponding svatar url from a mocked API.</p></li><li><p>Before the API returns, the higher-order component should be passing a placeholder URL <a href="http://test.com/test.png" target="_blank" rel="noopener">http://test.com/test.png</a> to the inner component.</p></li></ul><p>The exercise provides a base <code>Avatar</code> component. The usage should look like this.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SmartAvatar = withAvatarURL(Avatar)</span><br></pre></td></tr></table></figure><blockquote><p>Solution</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">smart-avatar</span> <span class="attr">username</span>=<span class="string">"vuejs"</span>&gt;</span><span class="tag">&lt;/<span class="name">smart-avatar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">fetchURL</span> <span class="params">(username, cb)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    setTiemout(<span class="function"><span class="params">()</span> =&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">      cb(<span class="string">'http://test.url'</span>)</span></span><br><span class="line">    &#125;, 500)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Avatar = &#123;</span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">'src'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: '<span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"src"</span>&gt;</span>'</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">withAvatarURL</span> <span class="params">(InnerComponent)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      props: [<span class="string">'username'</span>],</span></span><br><span class="line">      created () &#123;</span><br><span class="line"><span class="actionscript">        fetchURL(<span class="keyword">this</span>.username, url =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.url = url</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      data () &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123; url: <span class="string">'http://test.com/test.png'</span> &#125;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      render (h) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> h (Avatar, &#123;</span></span><br><span class="line">          props: &#123;</span><br><span class="line"><span class="actionscript">            src: <span class="keyword">this</span>.url</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> SmartAvatar = withAvatarURL(Avatar)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    component: &#123; SmartAvatar &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Render&quot;&gt;&lt;a href=&quot;#Render&quot; class=&quot;headerlink&quot; title=&quot;Render&quot;&gt;&lt;/a&gt;Render&lt;/h1&gt;&lt;h2 id=&quot;what’s-render-include-DOM-and-virtual-DOM&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="vue" scheme="https://onenotmind.github.io/tags/vue/"/>
    
      <category term="vue2" scheme="https://onenotmind.github.io/tags/vue2/"/>
    
      <category term="render" scheme="https://onenotmind.github.io/tags/render/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 Route</title>
    <link href="https://onenotmind.github.io/2020/05/23/vue2-route/"/>
    <id>https://onenotmind.github.io/2020/05/23/vue2-route/</id>
    <published>2020-05-23T06:57:44.381Z</published>
    <updated>2020-05-23T06:57:44.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="route"><a href="#route" class="headerlink" title="route"></a>route</h1><h2 id="Basic-Route"><a href="#Basic-Route" class="headerlink" title="Basic Route"></a>Basic Route</h2><p>Simple route if we have a <code>&lt;a href=&quot;#bar&quot;&gt;&lt;/a&gt;</code> when we click it, we can notify window <code>hashchange</code> event.</p><p>Let’s do an simple EXERCISE.</p><ul><li><p>display foo component when url is #foo</p></li><li><p>display bar component when url is #bar</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#foo"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">  app.url = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="javascript">    url: <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">    foo: &#123; template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">div</span>&gt;</span>` &#125;,</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    bar: &#123; template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">div</span>&gt;</span>` &#125;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Using-Route-Table"><a href="#Using-Route-Table" class="headerlink" title="Using Route Table"></a>Using Route Table</h2><p>we can use route table to store route info.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#foo"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">  app.url = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;bar&lt;/div&gt;`</span>&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> Foo = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;foo&lt;/div&gt;`</span>&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> NotFound = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;not found&lt;/div&gt;`</span>&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> routeTable = &#123;</span></span><br><span class="line"><span class="actionscript">  <span class="string">'bar'</span>: Bar,</span></span><br><span class="line"><span class="actionscript">  <span class="string">'foo'</span>: Foo,</span></span><br><span class="line"><span class="actionscript">  <span class="string">'notfound'</span>: NotFound</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="javascript">    url: <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  render (h) &#123;</span><br><span class="line"><span class="actionscript">    h(routeTable[<span class="keyword">this</span>.url])</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Complex-Route-Rules"><a href="#Complex-Route-Rules" class="headerlink" title="Complex Route Rules"></a>Complex Route Rules</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;route&quot;&gt;&lt;a href=&quot;#route&quot; class=&quot;headerlink&quot; title=&quot;route&quot;&gt;&lt;/a&gt;route&lt;/h1&gt;&lt;h2 id=&quot;Basic-Route&quot;&gt;&lt;a href=&quot;#Basic-Route&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="vue" scheme="https://onenotmind.github.io/tags/vue/"/>
    
      <category term="vue2" scheme="https://onenotmind.github.io/tags/vue2/"/>
    
      <category term="route" scheme="https://onenotmind.github.io/tags/route/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 Plugin</title>
    <link href="https://onenotmind.github.io/2020/05/23/vue2-plugin/"/>
    <id>https://onenotmind.github.io/2020/05/23/vue2-plugin/</id>
    <published>2020-05-23T06:57:44.380Z</published>
    <updated>2020-05-23T06:57:44.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h1><h2 id="write-plugins-in-vue2"><a href="#write-plugins-in-vue2" class="headerlink" title="write plugins in vue2"></a>write plugins in vue2</h2><p>there are two common methods to write plugins in vue2.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// plugin code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and use Vue.mixins</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.mixin(options)</span><br></pre></td></tr></table></figure><h2 id="write-a-simple-validation-plugin"><a href="#write-a-simple-validation-plugin" class="headerlink" title="write a simple validation plugin"></a>write a simple validation plugin</h2><p>create a plugin that teaches Vue components to handle a custom “rules” option. The rules option expects an object that specifies validation rules for data in the component.</p><p>Expected usage:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123; <span class="attr">foo</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      validate: <span class="function"><span class="params">value</span> =&gt;</span> value &gt; <span class="number">1</span>,</span><br><span class="line">      message: <span class="string">'foo must be greater than one'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Solution</p><p>In vue2, you can use <code>this.$options.rule</code> to get <code>rule</code> defined in Vue.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> RulesPlugin = &#123;</span><br><span class="line">  install (Vue) &#123;</span><br><span class="line">    Vue.mixin(&#123;</span><br><span class="line">      created () &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.$options.rules) &#123;</span><br><span class="line">          <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.$options.rules).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> rule = <span class="keyword">this</span>.$options.rules[key]</span><br><span class="line">            <span class="keyword">this</span>.$watch(key, newValue =&gt; &#123;</span><br><span class="line">              <span class="keyword">const</span> result = rule.validate(newValue)</span><br><span class="line">              <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(rule.message)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.use(RulesPlugin)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Plugin&quot;&gt;&lt;a href=&quot;#Plugin&quot; class=&quot;headerlink&quot; title=&quot;Plugin&quot;&gt;&lt;/a&gt;Plugin&lt;/h1&gt;&lt;h2 id=&quot;write-plugins-in-vue2&quot;&gt;&lt;a href=&quot;#write-plugins-in
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="vue" scheme="https://onenotmind.github.io/tags/vue/"/>
    
      <category term="vue2" scheme="https://onenotmind.github.io/tags/vue2/"/>
    
      <category term="plugin" scheme="https://onenotmind.github.io/tags/plugin/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 Reactivity</title>
    <link href="https://onenotmind.github.io/2020/05/23/vue2-reactivity/"/>
    <id>https://onenotmind.github.io/2020/05/23/vue2-reactivity/</id>
    <published>2020-05-23T06:57:44.380Z</published>
    <updated>2020-05-23T06:57:44.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reactivity"><a href="#Reactivity" class="headerlink" title="Reactivity"></a>Reactivity</h1><h2 id="what’s-reactivity"><a href="#what’s-reactivity" class="headerlink" title="what’s reactivity?"></a>what’s reactivity?</h2><p>let us show an example on relationship with variables.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> b = a * <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 30</span></span><br><span class="line">a = <span class="number">4</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 30</span></span><br><span class="line"><span class="comment">// if we want b to change when a changed</span></span><br><span class="line">b = a * <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 40</span></span><br></pre></td></tr></table></figure><p>so if we have a function to exec when a changed. let us say.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onAChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  b = a * <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>now, when we move to DOM.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"cell b1"</span>&gt;</span>&#123;&#123; b &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// when a change</span></span></span><br><span class="line"><span class="javascript">onStateChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.querySelector(<span class="string">'cell.b'</span>).textContent = state.a * <span class="number">10</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="comment">// in other expression</span></span></span><br><span class="line"><span class="javascript">onStateChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">  view = render(state)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>in react.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onStateChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  view = render(state)</span><br><span class="line">&#125;)</span><br><span class="line">setState(&#123; <span class="attr">a</span>: <span class="number">5</span> &#125;)</span><br></pre></td></tr></table></figure><h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h2><p>vue use <code>Object.defineProperty</code> to catch variable get and set.</p><blockquote><p><code>Object.defineProperty</code> basic usage</p></blockquote><p><code>Object.defineProperty(obj, prop, descriptor)</code></p><p><code>obj</code> object to defined prop.</p><p><code>prop</code> object prop to defined</p><p><code>descriptor</code> descriptor for defination</p><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'key'</span>, &#123;</span><br><span class="line">  <span class="comment">// enumerable: true if and only if the type of this property descriptor may be changed and </span></span><br><span class="line">  <span class="comment">// if the property may be deleted from the corresponding object</span></span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// configurable: true if and only if this property shows up during enumeration of the properties</span></span><br><span class="line">  <span class="comment">// on the corresponding object.</span></span><br><span class="line">  configurable: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// writable: true if and only if the value associated with the property may be changed</span></span><br><span class="line">  <span class="comment">// with an assignment operator.</span></span><br><span class="line">  writable: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// A function which serves as a getter for the property, or undefined if there is no getter.</span></span><br><span class="line">  <span class="keyword">get</span> () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// A function which serves as a setter for the property, or undefined if there is no setter.</span></span><br><span class="line">  <span class="keyword">set</span> (newVal) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>we can take an exercise for <code>Object.defineProperty</code></p><h3 id="EXERCISE"><a href="#EXERCISE" class="headerlink" title="EXERCISE"></a>EXERCISE</h3><p>Implement a convert function that</p><ul><li><p>take an Object as the argument</p></li><li><p>convert the Object’s property to place into getter/setters using Object.defineProperty.</p></li><li><p>The converted object should retain origin behavior, but at the sanme time log all the get/set operations.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> internalVal = obj[key]</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">      <span class="keyword">get</span> () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`getting key "<span class="subst">$&#123;key&#125;</span>": "<span class="subst">$&#123;internalVal&#125;</span>"`</span>)</span><br><span class="line">        <span class="keyword">return</span> internalVal</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span> (newValue) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`set key "<span class="subst">$&#123;key&#125;</span>": "<span class="subst">$&#123;newValue&#125;</span>"`</span>)</span><br><span class="line">        internalVal = newValue </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if we want build a data reactivity system, as for a variable, we should know which other variable rely on this variable.Just like above</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> b = a * <span class="number">10</span></span><br></pre></td></tr></table></figure><ul><li><p><code>b</code> is rely on <code>a</code>.But where can we find these dependency, yep, we can catch it by <code>Object.defineProperty get</code> if <code>b</code> want to get <code>a</code>, now <code>b</code> is <code>a</code> dependency, we can catch <code>b</code> from <code>a</code> get function.</p></li><li><p>if we have collect <code>a</code> dependency, next thing is that we should nofity <code>a</code> all dependency to update when <code>a</code> changed(just like tell <code>b</code> that <code>a</code> is different, so you should update), where can we do thiese thing, yep we can do this in <code>a</code> set function.</p><p>these are two main rules in build reactivity system, you should undestand it.</p><p>But what really we do in vue2, please keep watching.</p></li></ul><h2 id="collect-dependency"><a href="#collect-dependency" class="headerlink" title="collect dependency"></a>collect dependency</h2><h3 id="EXERCISE-Dependency"><a href="#EXERCISE-Dependency" class="headerlink" title="EXERCISE Dependency"></a>EXERCISE Dependency</h3><ul><li><p>create Dep class with two methods: depend and notify</p></li><li><p>create an autorun function that takes an updater function.</p></li><li><p>Inside the update function, you can explicitly depend on an instance of Dep by calling dep.depend()</p></li><li><p>later, you can triggle the update function to run aigain by calling dep.notify()</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.Dep = <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">this</span>.subcribers = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  depend () &#123;</span><br><span class="line">    <span class="keyword">if</span> (activeUpdate) &#123;</span><br><span class="line">      <span class="keyword">this</span>.subscribers.add(activeUpdate)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  notify () &#123;</span><br><span class="line">    <span class="keyword">this</span>.subscribers.forEach(<span class="function"><span class="params">sub</span> =&gt;</span> sub())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> activeUpdate</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autorun</span> (<span class="params">update</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">wrappedUpdate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    activeUpdate = wrappedUpdate</span><br><span class="line">    update()</span><br><span class="line">    activeUpdate = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  wrappedUpdate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="set-watcher"><a href="#set-watcher" class="headerlink" title="set watcher"></a>set watcher</h2><h3 id="EXERCISE-Observer"><a href="#EXERCISE-Observer" class="headerlink" title="EXERCISE Observer"></a>EXERCISE Observer</h3><p>Combine the previous two functions, renaming convert() to observe() and keeping autorun():</p><ul><li><p>observe(): converts the properties in the received object and make them reactive.For each converted peroperty, it gets assigned a Dep instance which keeps tracks of a list of subscribing update function, and triggers them to re-run when its setter is invoked.</p></li><li><p>autorun(): takes an update function and re-runs it when properties that the update function subcribes to have been mutated. An update function is said to be “subscribe” to a property if it relies on that property during its evalution.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autorun</span> (<span class="params">update</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reactivity&quot;&gt;&lt;a href=&quot;#Reactivity&quot; class=&quot;headerlink&quot; title=&quot;Reactivity&quot;&gt;&lt;/a&gt;Reactivity&lt;/h1&gt;&lt;h2 id=&quot;what’s-reactivity&quot;&gt;&lt;a href=&quot;#what
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="vue" scheme="https://onenotmind.github.io/tags/vue/"/>
    
      <category term="vue2" scheme="https://onenotmind.github.io/tags/vue2/"/>
    
      <category term="reactivity" scheme="https://onenotmind.github.io/tags/reactivity/"/>
    
  </entry>
  
  <entry>
    <title>Vue Basic Intro</title>
    <link href="https://onenotmind.github.io/2020/05/23/vue-basic/"/>
    <id>https://onenotmind.github.io/2020/05/23/vue-basic/</id>
    <published>2020-05-23T06:57:44.379Z</published>
    <updated>2020-05-23T06:57:44.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reactivity"><a href="#Reactivity" class="headerlink" title="Reactivity"></a>Reactivity</h1><p>let us show an example on relationship with variables.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> b = a * <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 30</span></span><br><span class="line">a = <span class="number">4</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 30</span></span><br><span class="line"><span class="comment">// if we want b to change when a changed</span></span><br><span class="line">b = a * <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 40</span></span><br></pre></td></tr></table></figure><p>so if we have a function to exec when a changed. let us say.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onAChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  b = a * <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>now, when we move to DOM.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"cell b1"</span>&gt;</span>&#123;&#123; b &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// when a change</span></span></span><br><span class="line"><span class="javascript">onStateChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.querySelector(<span class="string">'cell.b'</span>).textContent = state.a * <span class="number">10</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="comment">// in other expression</span></span></span><br><span class="line"><span class="javascript">onStateChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">  view = render(state)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>in react.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onStateChanged(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  view = render(state)</span><br><span class="line">&#125;)</span><br><span class="line">setState(&#123; <span class="attr">a</span>: <span class="number">5</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="EXERCISE"><a href="#EXERCISE" class="headerlink" title="EXERCISE"></a>EXERCISE</h3><p>Implement a convert function that</p><ul><li><p>take an Object as the argument</p></li><li><p>convert the Object’s property to place into getter/setters using Object.defineProperty.</p></li><li><p>The converted object should retain origin behavior, but at the sanme time log all the get/set operations.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> internalVal = obj[key]</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">      <span class="keyword">get</span> () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`getting key "<span class="subst">$&#123;key&#125;</span>": "<span class="subst">$&#123;internalVal&#125;</span>"`</span>)</span><br><span class="line">        <span class="keyword">return</span> internalVal</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span> (newValue) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`set key "<span class="subst">$&#123;key&#125;</span>": "<span class="subst">$&#123;newValue&#125;</span>"`</span>)</span><br><span class="line">        internalVal = newValue </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EXERCISE-Dependency"><a href="#EXERCISE-Dependency" class="headerlink" title="EXERCISE Dependency"></a>EXERCISE Dependency</h3><ul><li><p>create Dep class with two methods: depend and notify</p></li><li><p>create an autorun function that takes an updater function.</p></li><li><p>Inside the update function, you can explicitly depend on an instance of Dep by calling dep.depend()</p></li><li><p>later, you can triggle the update function to run aigain by calling dep.notify()</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.Dep = <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">this</span>.subcribers = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  depend () &#123;</span><br><span class="line">    <span class="keyword">if</span> (activeUpdate) &#123;</span><br><span class="line">      <span class="keyword">this</span>.subscribers.add(activeUpdate)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  notify () &#123;</span><br><span class="line">    <span class="keyword">this</span>.subscribers.forEach(<span class="function"><span class="params">sub</span> =&gt;</span> sub())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> activeUpdate</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autorun</span> (<span class="params">update</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">wrappedUpdate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    activeUpdate = wrappedUpdate</span><br><span class="line">    update()</span><br><span class="line">    activeUpdate = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  wrappedUpdate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EXERCISE-Observer"><a href="#EXERCISE-Observer" class="headerlink" title="EXERCISE Observer"></a>EXERCISE Observer</h3><p>Combine the previous two functions, renaming convert() to observe() and keeping autorun():</p><ul><li><p>observe(): converts the properties in the received object and make them reactive.For each converted peroperty, it gets assigned a Dep instance which keeps tracks of a list of subscribing update function, and triggers them to re-run when its setter is invoked.</p></li><li><p>autorun(): takes an update function and re-runs it when properties that the update function subcribes to have been mutated. An update function is said to be “subscribe” to a property if it relies on that property during its evalution.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autorun</span> (<span class="params">update</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h1><p>two methods to write plugins</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// plugin code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.mixin(options)</span><br></pre></td></tr></table></figure><h3 id="EXERCISE-simple-plugin"><a href="#EXERCISE-simple-plugin" class="headerlink" title="EXERCISE simple plugin"></a>EXERCISE simple plugin</h3><p>create a plugin that teaches Vue components to handle a custom “rules” option. The rules option expects an object that specifies validation rules for data in the component.</p><p>Expected usage:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> RulesPlugin = &#123;</span><br><span class="line">  install (Vue) &#123;</span><br><span class="line">    Vue.mixin(&#123;</span><br><span class="line">      created () &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.$options.rules) &#123;</span><br><span class="line">          <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.$options.rules).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> rule = <span class="keyword">this</span>.$options.rules[key]</span><br><span class="line">            <span class="keyword">this</span>.$watch(key, newValue =&gt; &#123;</span><br><span class="line">              <span class="keyword">const</span> result = rule.validate(newValue)</span><br><span class="line">              <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(rule.message)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.use(RulesPlugin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123; <span class="attr">foo</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      validate: <span class="function"><span class="params">value</span> =&gt;</span> value &gt; <span class="number">1</span>,</span><br><span class="line">      message: <span class="string">'foo must be greater than one'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Render"><a href="#Render" class="headerlink" title="Render"></a>Render</h1><p>Template<br>-&gt; (compiled into) Render Function<br>-&gt; (returns) Virtual DOM<br>-&gt; (generates) Actual DOM</p><blockquote><p>Actual DOM</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.createElement(&#39;div&#39;)</span><br><span class="line"></span><br><span class="line">&quot;[Object HTMLDivElement]&quot; Browser Native Object (expensive)</span><br></pre></td></tr></table></figure><blockquote><p>Virtual DOM</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vm.$createElement(&#39;div&#39;)</span><br><span class="line">&#123; tag: &#39;div&#39;, data: &#123; attrs: &#123;&#125;&#125;, children: [] &#125; Plain Javascript Object (cheap)</span><br></pre></td></tr></table></figure><h3 id="Vue-Render-Function-API"><a href="#Vue-Render-Function-API" class="headerlink" title="Vue Render Function API"></a>Vue Render Function API</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  render (h) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, &#123;&#125;, [])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>examples</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">h(<span class="string">'div'</span>, <span class="string">'some text'</span>)</span><br><span class="line"></span><br><span class="line">h(<span class="string">'div'</span>, &#123; <span class="attr">class</span>: <span class="string">'foo'</span> &#125;, <span class="string">'some text'</span> )</span><br><span class="line"></span><br><span class="line">h(<span class="string">'div'</span> &#123; &#125;, [</span><br><span class="line">  <span class="string">'some text'</span>,</span><br><span class="line">  h(<span class="string">'span'</span>, <span class="string">'bar'</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><blockquote><p>h can directly render a component</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MyComponent <span class="keyword">from</span> <span class="string">'...'</span></span><br><span class="line"></span><br><span class="line">h(MyComponent, &#123;</span><br><span class="line">  props: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="EXERCISE-render-tags"><a href="#EXERCISE-render-tags" class="headerlink" title="EXERCISE render tags"></a>EXERCISE render tags</h3><p>Implement the ‘example’ component which given the following usage:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">example</span> <span class="attr">:tags</span>=<span class="string">"['h1', 'h2', 'h3']"</span>&gt;</span><span class="tag">&lt;/<span class="name">example</span>&gt;</span></span><br></pre></td></tr></table></figure><p>which renders the expected output:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>0<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>2<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Solution</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">example</span> <span class="attr">:tags</span>=<span class="string">"['h1', 'h2', 'h3']"</span>&gt;</span><span class="tag">&lt;/<span class="name">example</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'example'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">'tags'</span>]</span></span><br><span class="line">    render (h) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> h(<span class="string">'div'</span>, <span class="keyword">this</span>.tags.map(<span class="function">(<span class="params">tag, i</span>) =&gt;</span> h(tag, i)))</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>if example is a functional component, code may write like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'example'</span>, &#123;</span><br><span class="line">  props: [<span class="string">'tags'</span>]</span><br><span class="line">  functional: <span class="literal">true</span>,</span><br><span class="line">  render (h, context) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, context.props.tags.map(<span class="function">(<span class="params">tag, i</span>) =&gt;</span> h(tag, i)))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="EXERCISE-render-Component"><a href="#EXERCISE-render-Component" class="headerlink" title="EXERCISE render Component"></a>EXERCISE render Component</h3><ul><li><p>Implement a Foo component wihich simple render <code>&lt;div&gt;foo&lt;/div&gt;</code>, and a Bar component which simple renders <code>&lt;div&gt;bar&lt;/div&gt;</code> (using render function obviously)</p></li><li><p>Implement an <example> component which renders the Foo component or the Bar component based on its <code>ok</code> prop. For <example> if ok is true, the final renderd dom should be <code>&lt;div&gt;foo&lt;/div&gt;</code></p></li><li><p>Implement a button in the root component that toggles <code>&lt;example&gt;</code> between <code>Foo</code> and <code>Bar</code> by controlling its <code>ok</code> prop.</p></li></ul><blockquote><p>Solution</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">example</span> <span class="attr">:ok</span>=<span class="string">"ok"</span>&gt;</span><span class="tag">&lt;/<span class="name">example</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"ok = !ok"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Foo = &#123;</span></span><br><span class="line"><span class="javascript">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(<span class="string">'div'</span>, <span class="string">'foo'</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Bar = &#123;</span></span><br><span class="line"><span class="javascript">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(<span class="string">'div'</span>, <span class="string">'bar'</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'example'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">'ok'</span>]</span></span><br><span class="line">    render (h) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.ok ? h(Foo) : h(Bar)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">    data: &#123; ok: <span class="literal">true</span> &#125;</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="EXERCISE-Higher-Order-Component"><a href="#EXERCISE-Higher-Order-Component" class="headerlink" title="EXERCISE Higher Order Component"></a>EXERCISE Higher Order Component</h3><ul><li><p>Implement a withAvatarURL helper which takes an inner component that expects a <code>url</code> prop, and return a higher-order component that accepts a <code>username</code> prop instead. The higher-order component should be responsible for fetching the curresponding svatar url from a mocked API.</p></li><li><p>Before the API returns, the higher-order component should be passing a placeholder URL <a href="http://test.com/test.png" target="_blank" rel="noopener">http://test.com/test.png</a> to the inner component.</p></li></ul><p>The exercise provides a base <code>Avatar</code> component. The usage should look like this.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SmartAvatar = withAvatarURL(Avatar)</span><br></pre></td></tr></table></figure><blockquote><p>Solution</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">smart-avatar</span> <span class="attr">username</span>=<span class="string">"vuejs"</span>&gt;</span><span class="tag">&lt;/<span class="name">smart-avatar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">fetchURL</span> <span class="params">(username, cb)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    setTiemout(<span class="function"><span class="params">()</span> =&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">      cb(<span class="string">'http://test.url'</span>)</span></span><br><span class="line">    &#125;, 500)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Avatar = &#123;</span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">'src'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: '<span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"src"</span>&gt;</span>'</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">withAvatarURL</span> <span class="params">(InnerComponent)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      props: [<span class="string">'username'</span>],</span></span><br><span class="line">      created () &#123;</span><br><span class="line"><span class="actionscript">        fetchURL(<span class="keyword">this</span>.username, url =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.url = url</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      data () &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123; url: <span class="string">'http://test.com/test.png'</span> &#125;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      render (h) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> h (Avatar, &#123;</span></span><br><span class="line">          props: &#123;</span><br><span class="line"><span class="actionscript">            src: <span class="keyword">this</span>.url</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> SmartAvatar = withAvatarURL(Avatar)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    component: &#123; SmartAvatar &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="VUEX"><a href="#VUEX" class="headerlink" title="VUEX"></a>VUEX</h1><h3 id="shared-object"><a href="#shared-object" class="headerlink" title="shared object"></a>shared object</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  count: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line">  &#125;,</span><br><span class="line">  render (h) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, <span class="keyword">this</span>.count)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; Counter &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>if <code>count</code> can be reactivity, using Vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"inc"</span>&gt;</span>inc<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> state = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> () &#123;</span></span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    inc () &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.count++</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> Counter = &#123;</span></span><br><span class="line">  render (h) &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> h(<span class="string">'div'</span>, state.count)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  components: &#123; Counter &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    inc () &#123;</span><br><span class="line">      state.inc()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>we can use more vuex like sytax</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"inc"</span>&gt;</span>inc<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span> <span class="params">(&#123; state, mutations &#125;)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">return</span> <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">    data: &#123; state &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      commit (mutationType) &#123;</span><br><span class="line"><span class="actionscript">        mutations[mutationType](<span class="keyword">this</span>.state)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> store = createStore(&#123;</span></span><br><span class="line">  state: &#123; count: 0 &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    inc (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> Counter = &#123;</span></span><br><span class="line">  render (h) &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> h(<span class="string">'div'</span>, store.state.count)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  components: &#123; Counter &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    inc () &#123;</span><br><span class="line"><span class="actionscript">      store.commit(<span class="string">'inc'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="vue-route"><a href="#vue-route" class="headerlink" title="vue route"></a>vue route</h1><h3 id="EXERCISE-1"><a href="#EXERCISE-1" class="headerlink" title="EXERCISE"></a>EXERCISE</h3><ul><li><p>display foo component when url is #foo</p></li><li><p>display bar component when url is #bar</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#foo"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">  app.url = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="javascript">    url: <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">    foo: &#123; template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">div</span>&gt;</span>` &#125;,</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    bar: &#123; template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">div</span>&gt;</span>` &#125;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>using route table</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#foo"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">  app.url = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;bar&lt;/div&gt;`</span>&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> Foo = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;foo&lt;/div&gt;`</span>&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> NotFound = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;not found&lt;/div&gt;`</span>&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> routeTable = &#123;</span></span><br><span class="line"><span class="actionscript">  <span class="string">'bar'</span>: Bar,</span></span><br><span class="line"><span class="actionscript">  <span class="string">'foo'</span>: Foo,</span></span><br><span class="line"><span class="actionscript">  <span class="string">'notfound'</span>: NotFound</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="javascript">    url: <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  render (h) &#123;</span><br><span class="line"><span class="actionscript">    h(routeTable[<span class="keyword">this</span>.url])</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reactivity&quot;&gt;&lt;a href=&quot;#Reactivity&quot; class=&quot;headerlink&quot; title=&quot;Reactivity&quot;&gt;&lt;/a&gt;Reactivity&lt;/h1&gt;&lt;p&gt;let us show an example on relationship
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="vue" scheme="https://onenotmind.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>nodejs Basic Intro</title>
    <link href="https://onenotmind.github.io/2020/05/23/nodejs-intro/"/>
    <id>https://onenotmind.github.io/2020/05/23/nodejs-intro/</id>
    <published>2020-05-23T06:57:44.378Z</published>
    <updated>2020-05-23T06:57:44.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nodejs-event-eventEmitter"><a href="#nodejs-event-eventEmitter" class="headerlink" title="nodejs event eventEmitter"></a>nodejs event eventEmitter</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;nodejs-event-eventEmitter&quot;&gt;&lt;a href=&quot;#nodejs-event-eventEmitter&quot; class=&quot;headerlink&quot; title=&quot;nodejs event eventEmitter&quot;&gt;&lt;/a&gt;nodejs even
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="nodejs" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/nodejs/"/>
    
    
      <category term="eventEmitter" scheme="https://onenotmind.github.io/tags/eventEmitter/"/>
    
      <category term="nodejs" scheme="https://onenotmind.github.io/tags/nodejs/"/>
    
      <category term="event" scheme="https://onenotmind.github.io/tags/event/"/>
    
  </entry>
  
  <entry>
    <title>Phaser</title>
    <link href="https://onenotmind.github.io/2020/05/23/phaser-intro/"/>
    <id>https://onenotmind.github.io/2020/05/23/phaser-intro/</id>
    <published>2020-05-23T06:57:44.378Z</published>
    <updated>2020-05-23T06:57:44.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Phaser"><a href="#Phaser" class="headerlink" title="Phaser"></a>Phaser</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Phaser&quot;&gt;&lt;a href=&quot;#Phaser&quot; class=&quot;headerlink&quot; title=&quot;Phaser&quot;&gt;&lt;/a&gt;Phaser&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="phaser" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/phaser/"/>
    
    
      <category term="phaser" scheme="https://onenotmind.github.io/tags/phaser/"/>
    
  </entry>
  
  <entry>
    <title>Electron Basic Intro</title>
    <link href="https://onenotmind.github.io/2020/05/23/electron-introduce/"/>
    <id>https://onenotmind.github.io/2020/05/23/electron-introduce/</id>
    <published>2020-05-23T06:57:44.377Z</published>
    <updated>2020-05-23T06:57:44.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="electron-文章目录"><a href="#electron-文章目录" class="headerlink" title="electron 文章目录"></a>electron 文章目录</h1><h2 id="nodejs事件循环"><a href="#nodejs事件循环" class="headerlink" title="nodejs事件循环"></a>nodejs事件循环</h2><h2 id="chrome事件循环"><a href="#chrome事件循环" class="headerlink" title="chrome事件循环"></a>chrome事件循环</h2><h2 id="探索electron和nw-js内部"><a href="#探索electron和nw-js内部" class="headerlink" title="探索electron和nw.js内部"></a>探索electron和nw.js内部</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;electron-文章目录&quot;&gt;&lt;a href=&quot;#electron-文章目录&quot; class=&quot;headerlink&quot; title=&quot;electron 文章目录&quot;&gt;&lt;/a&gt;electron 文章目录&lt;/h1&gt;&lt;h2 id=&quot;nodejs事件循环&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="electron" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/electron/"/>
    
    
      <category term="electron" scheme="https://onenotmind.github.io/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://onenotmind.github.io/2020/05/23/hello-world/"/>
    <id>https://onenotmind.github.io/2020/05/23/hello-world/</id>
    <published>2020-05-23T06:57:44.377Z</published>
    <updated>2020-05-23T06:57:44.378Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>笔记撤销恢复</title>
    <link href="https://onenotmind.github.io/2020/05/23/canvas-recovery/"/>
    <id>https://onenotmind.github.io/2020/05/23/canvas-recovery/</id>
    <published>2020-05-23T06:57:44.376Z</published>
    <updated>2020-05-23T06:57:44.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="笔记撤销恢复"><a href="#笔记撤销恢复" class="headerlink" title="笔记撤销恢复"></a>笔记撤销恢复</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.eles &#x3D; [] &#x2F;&#x2F; 当前页画布元素集合</span><br><span class="line">this.historyDatas &#x3D; &#123;&#125; &#x2F;&#x2F; 整个课件数据存储 this.historyDatas[this.pageId] &#x3D; this.eles</span><br><span class="line">this.historyIndex &#x3D; -1 &#x2F;&#x2F; 当前页撤销回退坐标</span><br></pre></td></tr></table></figure><h2 id="画布的渲染"><a href="#画布的渲染" class="headerlink" title="画布的渲染"></a>画布的渲染</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">renderByData () &#123;</span><br><span class="line">  this.clear()</span><br><span class="line">  if (this.historyIndex &gt;&#x3D; 0) &#123;</span><br><span class="line">    for (let i &#x3D; 0; i &lt; this.historyIndex + 1; i++) &#123;</span><br><span class="line">      let ele &#x3D; this.eles[i]</span><br><span class="line">      if (!ele || !ele.isFinish()) continue</span><br><span class="line">      if (ele.type &#x3D;&#x3D;&#x3D; &#39;clearCanvas&#39;) &#123;</span><br><span class="line">        let config &#x3D; ele.getConfig()</span><br><span class="line">        config.width &#x3D; this.canv.width &#x2F; this.scale</span><br><span class="line">        config.height &#x3D; this.canv.height &#x2F; this.scale</span><br><span class="line">        ele.setConfig(config)</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;&#x2F; 渲染每一笔画笔</span><br><span class="line">      ele.render(this.ctx)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;笔记撤销恢复&quot;&gt;&lt;a href=&quot;#笔记撤销恢复&quot; class=&quot;headerlink&quot; title=&quot;笔记撤销恢复&quot;&gt;&lt;/a&gt;笔记撤销恢复&lt;/h1&gt;&lt;h2 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="canvas" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/canvas/"/>
    
    
      <category term="canvas" scheme="https://onenotmind.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>几何图形</title>
    <link href="https://onenotmind.github.io/2020/05/23/canvas-shape/"/>
    <id>https://onenotmind.github.io/2020/05/23/canvas-shape/</id>
    <published>2020-05-23T06:57:44.376Z</published>
    <updated>2020-05-23T06:57:44.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="几何图形"><a href="#几何图形" class="headerlink" title="几何图形"></a>几何图形</h1><h2 id="几何图形绘制"><a href="#几何图形绘制" class="headerlink" title="几何图形绘制"></a>几何图形绘制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br></pre></td><td class="code"><pre><span class="line">class OriginShape &#123;</span><br><span class="line">  constructor (ctxTemp &#x3D; null) &#123;</span><br><span class="line">    this.ctxTemp &#x3D; ctxTemp</span><br><span class="line">    this.opts &#x3D; &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getCenterPoint () &#123;</span><br><span class="line">    let x &#x3D; (this.opts.end.x + this.opts.start.x) &#x2F; 2</span><br><span class="line">    let y &#x3D; (this.opts.end.y + this.opts.start.y) &#x2F; 2</span><br><span class="line">    return &#123; x, y &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 公共函数，画圆、椭圆、半圆、虚线圆、实线圆</span><br><span class="line">  _circle (center, a, b, semiCircle) &#123;</span><br><span class="line">    this.ctxTemp.beginPath()</span><br><span class="line">    let r &#x3D; a &gt; b ? a : b</span><br><span class="line">    let ratioX &#x3D; a &#x2F; r</span><br><span class="line">    let ratioY &#x3D; b &#x2F; r</span><br><span class="line">    this.ctxTemp.save()</span><br><span class="line">    this.ctxTemp.scale(ratioX, ratioY)</span><br><span class="line">    if (semiCircle &#x3D;&#x3D;&#x3D; &#39;up&#39;) &#123;</span><br><span class="line">      &#x2F;&#x2F; 上半圆 虚线</span><br><span class="line">      this.ctxTemp.save()</span><br><span class="line">      this.ctxTemp.setLineDash([10, 15])</span><br><span class="line">      this.ctxTemp.arc(</span><br><span class="line">        center.x &#x2F; ratioX,</span><br><span class="line">        center.y &#x2F; ratioY,</span><br><span class="line">        r,</span><br><span class="line">        0,</span><br><span class="line">        Math.PI,</span><br><span class="line">        true</span><br><span class="line">      )</span><br><span class="line">      this.ctxTemp.stroke()</span><br><span class="line">      this.ctxTemp.restore()</span><br><span class="line">    &#125; else if (semiCircle &#x3D;&#x3D;&#x3D; &#39;down&#39;) &#123;</span><br><span class="line">      &#x2F;&#x2F; 下半圆 实线</span><br><span class="line">      this.ctxTemp.beginPath()</span><br><span class="line">      this.ctxTemp.arc(</span><br><span class="line">        center.x &#x2F; ratioX,</span><br><span class="line">        center.y &#x2F; ratioY,</span><br><span class="line">        r,</span><br><span class="line">        0,</span><br><span class="line">        Math.PI,</span><br><span class="line">        false</span><br><span class="line">      )</span><br><span class="line">      this.ctxTemp.stroke()</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      &#x2F;&#x2F; 整圆</span><br><span class="line">      this.ctxTemp.beginPath()</span><br><span class="line">      this.ctxTemp.arc(</span><br><span class="line">        center.x &#x2F; ratioX,</span><br><span class="line">        center.y &#x2F; ratioY,</span><br><span class="line">        r,</span><br><span class="line">        0,</span><br><span class="line">        2 * Math.PI,</span><br><span class="line">        false</span><br><span class="line">      )</span><br><span class="line">      this.ctxTemp.stroke()</span><br><span class="line">    &#125;</span><br><span class="line">    this.ctxTemp.restore()</span><br><span class="line">    this.ctxTemp.closePath()</span><br><span class="line">  &#125;</span><br><span class="line">  _axis (direction) &#123;</span><br><span class="line">    let lineWidth &#x3D; this.ctxTemp.lineWidth</span><br><span class="line">    let p1 &#x3D; &#123;&#125;</span><br><span class="line">    let p2 &#x3D; &#123;&#125;</span><br><span class="line">    let p3 &#x3D; &#123;&#125;</span><br><span class="line">    let p4 &#x3D; &#123;&#125;</span><br><span class="line">    let p5 &#x3D; &#123;&#125;</span><br><span class="line">    if (direction &#x3D;&#x3D;&#x3D; &#39;x&#39;) &#123;</span><br><span class="line">      p1 &#x3D; &#123;</span><br><span class="line">        x: this.opts.start.x,</span><br><span class="line">        y: (this.opts.end.y + this.opts.start.y) &#x2F; 2</span><br><span class="line">      &#125;</span><br><span class="line">      if (this.opts.end.x &lt; this.opts.start.x) &#123;</span><br><span class="line">        p2 &#x3D; &#123;</span><br><span class="line">          x: this.opts.end.x + 15,</span><br><span class="line">          y: (this.opts.end.y + this.opts.start.y) &#x2F; 2</span><br><span class="line">        &#125;</span><br><span class="line">        p5 &#x3D; &#123;</span><br><span class="line">          x: p2.x - 15,</span><br><span class="line">          y: p2.y</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        p2 &#x3D; &#123;</span><br><span class="line">          x: this.opts.end.x - 15,</span><br><span class="line">          y: (this.opts.end.y + this.opts.start.y) &#x2F; 2</span><br><span class="line">        &#125;</span><br><span class="line">        p5 &#x3D; &#123;</span><br><span class="line">          x: p2.x + 15,</span><br><span class="line">          y: p2.y</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      p3 &#x3D; &#123;</span><br><span class="line">        x: p2.x,</span><br><span class="line">        y: p2.y - 10 - lineWidth &#x2F; 2</span><br><span class="line">      &#125;</span><br><span class="line">      p4 &#x3D; &#123;</span><br><span class="line">        x: p2.x,</span><br><span class="line">        y: p2.y + 10 + lineWidth &#x2F; 2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else if (direction &#x3D;&#x3D;&#x3D; &#39;y&#39;) &#123;</span><br><span class="line">      if (this.opts.end.y &lt; this.opts.start.y) &#123;</span><br><span class="line">        p1 &#x3D; &#123;</span><br><span class="line">          x: (this.opts.end.x + this.opts.start.x) &#x2F; 2,</span><br><span class="line">          y: this.opts.start.y</span><br><span class="line">        &#125;</span><br><span class="line">        p2 &#x3D; &#123;</span><br><span class="line">          x: (this.opts.end.x + this.opts.start.x) &#x2F; 2,</span><br><span class="line">          y: this.opts.end.y + 15</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        p1 &#x3D; &#123;</span><br><span class="line">          x: (this.opts.end.x + this.opts.start.x) &#x2F; 2,</span><br><span class="line">          y: this.opts.end.y</span><br><span class="line">        &#125;</span><br><span class="line">        p2 &#x3D; &#123;</span><br><span class="line">          x: (this.opts.end.x + this.opts.start.x) &#x2F; 2,</span><br><span class="line">          y: this.opts.start.y + 15</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      p3 &#x3D; &#123;</span><br><span class="line">        x: p2.x - 10 - lineWidth &#x2F; 2,</span><br><span class="line">        y: p2.y</span><br><span class="line">      &#125;</span><br><span class="line">      p4 &#x3D; &#123;</span><br><span class="line">        x: p2.x + 10 + lineWidth &#x2F; 2,</span><br><span class="line">        y: p2.y</span><br><span class="line">      &#125;</span><br><span class="line">      p5 &#x3D; &#123;</span><br><span class="line">        x: p2.x,</span><br><span class="line">        y: p2.y - 15</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    this.ctxTemp.beginPath()</span><br><span class="line">    this.ctxTemp.moveTo(p1.x, p1.y)</span><br><span class="line">    this.ctxTemp.lineTo(p2.x, p2.y)</span><br><span class="line">    this.ctxTemp.stroke()</span><br><span class="line">    this.ctxTemp.beginPath()</span><br><span class="line">    this.ctxTemp.moveTo(p3.x, p3.y)</span><br><span class="line">    this.ctxTemp.lineTo(p4.x, p4.y)</span><br><span class="line">    this.ctxTemp.lineTo(p5.x, p5.y)</span><br><span class="line">    this.ctxTemp.closePath()</span><br><span class="line">    this.ctxTemp.fill()</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 矩形</span><br><span class="line">  rectangle () &#123;</span><br><span class="line">    this.ctxTemp.rect(</span><br><span class="line">      this.opts.start.x,</span><br><span class="line">      this.opts.start.y,</span><br><span class="line">      this.opts.end.x - this.opts.start.x,</span><br><span class="line">      this.opts.end.y - this.opts.start.y</span><br><span class="line">    )</span><br><span class="line">    this.ctxTemp.stroke()</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 三角形</span><br><span class="line">  triangle () &#123;</span><br><span class="line">    let p1 &#x3D; &#123;</span><br><span class="line">      x: (this.opts.end.x + this.opts.start.x) &#x2F; 2,</span><br><span class="line">      y: this.opts.start.y</span><br><span class="line">    &#125;</span><br><span class="line">    let p2 &#x3D; &#123;</span><br><span class="line">      x: this.opts.start.x,</span><br><span class="line">      y: this.opts.end.y</span><br><span class="line">    &#125;</span><br><span class="line">    let p3 &#x3D; this.opts.end</span><br><span class="line">    this.ctxTemp.moveTo(p1.x, p1.y)</span><br><span class="line">    this.ctxTemp.lineTo(p2.x, p2.y)</span><br><span class="line">    this.ctxTemp.lineTo(p3.x, p3.y)</span><br><span class="line">    this.ctxTemp.closePath()</span><br><span class="line">    this.ctxTemp.stroke()</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 直角三角形</span><br><span class="line">  rightTriangle () &#123;</span><br><span class="line">    let p1 &#x3D; this.opts.start</span><br><span class="line">    let p2 &#x3D; &#123;</span><br><span class="line">      x: this.opts.start.x,</span><br><span class="line">      y: this.opts.end.y</span><br><span class="line">    &#125;</span><br><span class="line">    let p3 &#x3D; this.opts.end</span><br><span class="line">    this.ctxTemp.moveTo(p1.x, p1.y)</span><br><span class="line">    this.ctxTemp.lineTo(p2.x, p2.y)</span><br><span class="line">    this.ctxTemp.lineTo(p3.x, p3.y)</span><br><span class="line">    this.ctxTemp.closePath()</span><br><span class="line">    this.ctxTemp.stroke()</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 直线</span><br><span class="line">  line () &#123;</span><br><span class="line">    this.ctxTemp.moveTo(this.opts.start.x, this.opts.start.y)</span><br><span class="line">    this.ctxTemp.lineTo(this.opts.end.x, this.opts.end.y)</span><br><span class="line">    this.ctxTemp.stroke()</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 虚线</span><br><span class="line">  dashed () &#123;</span><br><span class="line">    this.ctxTemp.save()</span><br><span class="line">    this.ctxTemp.setLineDash([10, 15])</span><br><span class="line">    this.ctxTemp.moveTo(this.opts.start.x, this.opts.start.y)</span><br><span class="line">    this.ctxTemp.lineTo(this.opts.end.x, this.opts.end.y)</span><br><span class="line">    this.ctxTemp.stroke()</span><br><span class="line">    this.ctxTemp.restore()</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 圆</span><br><span class="line">  circle () &#123;</span><br><span class="line">    let center &#x3D; &#123;</span><br><span class="line">      x: (this.opts.end.x + this.opts.start.x) &#x2F; 2,</span><br><span class="line">      y: (this.opts.end.y + this.opts.start.y) &#x2F; 2</span><br><span class="line">    &#125;</span><br><span class="line">    let a &#x3D; Math.abs((this.opts.end.x - this.opts.start.x) &#x2F; 2)</span><br><span class="line">    let b &#x3D; Math.abs((this.opts.end.y - this.opts.start.y) &#x2F; 2)</span><br><span class="line">    this._circle(center, a, b)</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 平行四边形</span><br><span class="line">  parallelogram () &#123;</span><br><span class="line">    let w &#x3D; this.opts.end.x - this.opts.start.x</span><br><span class="line">    let offset &#x3D; w &#x2F; 4</span><br><span class="line">    let p1 &#x3D; &#123;</span><br><span class="line">      x: this.opts.start.x + offset,</span><br><span class="line">      y: this.opts.start.y</span><br><span class="line">    &#125;</span><br><span class="line">    let p2 &#x3D; &#123;</span><br><span class="line">      x: this.opts.end.x,</span><br><span class="line">      y: this.opts.start.y</span><br><span class="line">    &#125;</span><br><span class="line">    let p3 &#x3D; &#123;</span><br><span class="line">      x: this.opts.end.x - offset,</span><br><span class="line">      y: this.opts.end.y</span><br><span class="line">    &#125;</span><br><span class="line">    let p4 &#x3D; &#123;</span><br><span class="line">      x: this.opts.start.x,</span><br><span class="line">      y: this.opts.end.y</span><br><span class="line">    &#125;</span><br><span class="line">    this.ctxTemp.moveTo(p1.x, p1.y)</span><br><span class="line">    this.ctxTemp.lineTo(p2.x, p2.y)</span><br><span class="line">    this.ctxTemp.lineTo(p3.x, p3.y)</span><br><span class="line">    this.ctxTemp.lineTo(p4.x, p4.y)</span><br><span class="line">    this.ctxTemp.closePath()</span><br><span class="line">    this.ctxTemp.stroke()</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 坐标系</span><br><span class="line">  coordinate () &#123;</span><br><span class="line">    this._axis(&#39;x&#39;)</span><br><span class="line">    this._axis(&#39;y&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 数轴</span><br><span class="line">  axis () &#123;</span><br><span class="line">    this._axis(&#39;x&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 立方体</span><br><span class="line">  cube () &#123;</span><br><span class="line">    let w &#x3D; this.opts.end.x - this.opts.start.x</span><br><span class="line">    let h &#x3D; this.opts.end.y - this.opts.start.y</span><br><span class="line">    let offsetX &#x3D; w &#x2F; 4</span><br><span class="line">    let offsetY &#x3D; h &#x2F; 4</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 顶部面的4点</span><br><span class="line">    let p1 &#x3D; &#123;</span><br><span class="line">      x: this.opts.start.x + offsetX,</span><br><span class="line">      y: this.opts.start.y</span><br><span class="line">    &#125;</span><br><span class="line">    let p2 &#x3D; &#123;</span><br><span class="line">      x: this.opts.end.x,</span><br><span class="line">      y: this.opts.start.y</span><br><span class="line">    &#125;</span><br><span class="line">    let p3 &#x3D; &#123;</span><br><span class="line">      x: this.opts.end.x - offsetX,</span><br><span class="line">      y: this.opts.start.y + offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    let p4 &#x3D; &#123;</span><br><span class="line">      x: this.opts.start.x,</span><br><span class="line">      y: this.opts.start.y + offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 正面 下面的2点</span><br><span class="line">    let p5 &#x3D; &#123;</span><br><span class="line">      x: this.opts.start.x,</span><br><span class="line">      y: this.opts.end.y</span><br><span class="line">    &#125;</span><br><span class="line">    let p6 &#x3D; &#123;</span><br><span class="line">      x: this.opts.end.x - offsetX,</span><br><span class="line">      y: this.opts.end.y</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 背后的2点</span><br><span class="line">    let p7 &#x3D; &#123;</span><br><span class="line">      x: this.opts.start.x + offsetX,</span><br><span class="line">      y: this.opts.end.y - offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    let p8 &#x3D; &#123;</span><br><span class="line">      x: this.opts.end.x,</span><br><span class="line">      y: this.opts.end.y - offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 画上面和正面</span><br><span class="line">    this.ctxTemp.moveTo(p4.x, p4.y)</span><br><span class="line">    this.ctxTemp.lineTo(p1.x, p1.y)</span><br><span class="line">    this.ctxTemp.lineTo(p2.x, p2.y)</span><br><span class="line">    this.ctxTemp.lineTo(p3.x, p3.y)</span><br><span class="line">    this.ctxTemp.lineTo(p4.x, p4.y)</span><br><span class="line">    this.ctxTemp.lineTo(p5.x, p5.y)</span><br><span class="line">    this.ctxTemp.lineTo(p6.x, p6.y)</span><br><span class="line">    this.ctxTemp.lineTo(p3.x, p3.y)</span><br><span class="line">    &#x2F;&#x2F; 画右面</span><br><span class="line">    this.ctxTemp.moveTo(p6.x, p6.y)</span><br><span class="line">    this.ctxTemp.lineTo(p8.x, p8.y)</span><br><span class="line">    this.ctxTemp.lineTo(p2.x, p2.y)</span><br><span class="line">    this.ctxTemp.stroke()</span><br><span class="line">    &#x2F;&#x2F; 背面的虚线</span><br><span class="line">    this.ctxTemp.save()</span><br><span class="line">    this.ctxTemp.setLineDash([10, 15])</span><br><span class="line">    this.ctxTemp.beginPath()</span><br><span class="line">    this.ctxTemp.moveTo(p1.x, p1.y)</span><br><span class="line">    this.ctxTemp.lineTo(p7.x, p7.y)</span><br><span class="line">    this.ctxTemp.lineTo(p5.x, p5.y)</span><br><span class="line">    this.ctxTemp.moveTo(p7.x, p7.y)</span><br><span class="line">    this.ctxTemp.lineTo(p8.x, p8.y)</span><br><span class="line">    this.ctxTemp.stroke()</span><br><span class="line">    this.ctxTemp.restore()</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 圆柱体</span><br><span class="line">  cylinder () &#123;</span><br><span class="line">    let h &#x3D; this.opts.end.y - this.opts.start.y</span><br><span class="line">    let offsetY &#x3D; h &#x2F; 8</span><br><span class="line">    let centerA &#x3D; &#123;</span><br><span class="line">      x: (this.opts.end.x + this.opts.start.x) &#x2F; 2,</span><br><span class="line">      y: this.opts.start.y + offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    let a &#x3D; Math.abs((this.opts.end.x - this.opts.start.x) &#x2F; 2)</span><br><span class="line">    let b &#x3D; offsetY</span><br><span class="line">    this._circle(centerA, a, b) &#x2F;&#x2F; 上圆</span><br><span class="line"></span><br><span class="line">    let centerB &#x3D; &#123;</span><br><span class="line">      x: (this.opts.end.x + this.opts.start.x) &#x2F; 2,</span><br><span class="line">      y: this.opts.end.y - offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    this._circle(centerB, a, b, &#39;up&#39;) &#x2F;&#x2F; 下虚半圆</span><br><span class="line">    this._circle(centerB, a, b, &#39;down&#39;) &#x2F;&#x2F; 下半实圆</span><br><span class="line">    let p1 &#x3D; &#123;</span><br><span class="line">      x: this.opts.start.x,</span><br><span class="line">      y: this.opts.start.y + offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    let p2 &#x3D; &#123;</span><br><span class="line">      x: this.opts.start.x,</span><br><span class="line">      y: this.opts.end.y - offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    let p3 &#x3D; &#123;</span><br><span class="line">      x: this.opts.end.x,</span><br><span class="line">      y: this.opts.start.y + offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    let p4 &#x3D; &#123;</span><br><span class="line">      x: this.opts.end.x,</span><br><span class="line">      y: this.opts.end.y - offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    this.ctxTemp.beginPath()</span><br><span class="line">    this.ctxTemp.moveTo(p1.x, p1.y)</span><br><span class="line">    this.ctxTemp.lineTo(p2.x, p2.y)</span><br><span class="line">    this.ctxTemp.moveTo(p3.x, p3.y)</span><br><span class="line">    this.ctxTemp.lineTo(p4.x, p4.y)</span><br><span class="line">    this.ctxTemp.stroke()</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 圆锥体</span><br><span class="line">  cone () &#123;</span><br><span class="line">    let h &#x3D; this.opts.end.y - this.opts.start.y</span><br><span class="line">    let offsetY &#x3D; h &#x2F; 8</span><br><span class="line">    let a &#x3D; Math.abs((this.opts.end.x - this.opts.start.x) &#x2F; 2)</span><br><span class="line">    let b &#x3D; offsetY</span><br><span class="line">    let center &#x3D; &#123;</span><br><span class="line">      x: (this.opts.end.x + this.opts.start.x) &#x2F; 2,</span><br><span class="line">      y: this.opts.end.y - offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    this._circle(center, a, b, &#39;up&#39;) &#x2F;&#x2F; 下虚半圆</span><br><span class="line">    this._circle(center, a, b, &#39;down&#39;) &#x2F;&#x2F; 下半实圆</span><br><span class="line">    let p1 &#x3D; &#123;</span><br><span class="line">      x: (this.opts.start.x + this.opts.end.x) &#x2F; 2,</span><br><span class="line">      y: this.opts.start.y</span><br><span class="line">    &#125;</span><br><span class="line">    let p2 &#x3D; &#123;</span><br><span class="line">      x: this.opts.start.x,</span><br><span class="line">      y: this.opts.end.y - offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    let p3 &#x3D; &#123;</span><br><span class="line">      x: this.opts.end.x,</span><br><span class="line">      y: this.opts.end.y - offsetY</span><br><span class="line">    &#125;</span><br><span class="line">    this.ctxTemp.beginPath()</span><br><span class="line">    this.ctxTemp.moveTo(p2.x, p2.y)</span><br><span class="line">    this.ctxTemp.lineTo(p1.x, p1.y)</span><br><span class="line">    this.ctxTemp.lineTo(p3.x, p3.y)</span><br><span class="line">    this.ctxTemp.stroke()</span><br><span class="line">  &#125;</span><br><span class="line">  drawShape (opts, ctx) &#123;</span><br><span class="line">    if (opts) &#123;</span><br><span class="line">      this.opts &#x3D; opts</span><br><span class="line">    &#125;</span><br><span class="line">    if (ctx) &#123;</span><br><span class="line">      this.ctxTemp &#x3D; ctx</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      throw new Error(&#39;Parameter ctx is empty&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">    this.ctxTemp.save()</span><br><span class="line">    this.ctxTemp.lineCap &#x3D; &#39;round&#39;</span><br><span class="line">    this.ctxTemp.lineJoin &#x3D; &#39;round&#39;</span><br><span class="line">    this.ctxTemp.strokeStyle &#x3D; opts.color</span><br><span class="line">    this.ctxTemp.fillStyle &#x3D; opts.color</span><br><span class="line">    this.ctxTemp.lineWidth &#x3D; opts.width</span><br><span class="line">    if (this.opts.angle) &#123;</span><br><span class="line">      let origin &#x3D; this.getCenterPoint()</span><br><span class="line">      this.ctxTemp.translate(origin.x, origin.y)</span><br><span class="line">      this.ctxTemp.rotate(this.opts.angle)</span><br><span class="line">      this.ctxTemp.translate(-origin.x, -origin.y)</span><br><span class="line">    &#125;</span><br><span class="line">    this.ctxTemp.beginPath()</span><br><span class="line">    switch (this.opts.type) &#123;</span><br><span class="line">      case &#39;rectangle&#39;: &#x2F;&#x2F; 矩形</span><br><span class="line">        this.rectangle()</span><br><span class="line">        break</span><br><span class="line">      case &#39;triangle&#39;: &#x2F;&#x2F; 等腰三角形</span><br><span class="line">        this.triangle()</span><br><span class="line">        break</span><br><span class="line">      case &#39;rightTriangle&#39;: &#x2F;&#x2F; 直角三角形</span><br><span class="line">        this.rightTriangle()</span><br><span class="line">        break</span><br><span class="line">      case &#39;line&#39;: &#x2F;&#x2F; 直线</span><br><span class="line">        this.line()</span><br><span class="line">        break</span><br><span class="line">      case &#39;dashed&#39;: &#x2F;&#x2F; 虚线</span><br><span class="line">        this.dashed()</span><br><span class="line">        break</span><br><span class="line">      case &#39;circle&#39;: &#x2F;&#x2F; 圆</span><br><span class="line">        this.circle()</span><br><span class="line">        break</span><br><span class="line">      case &#39;parallelogram&#39;: &#x2F;&#x2F; 平行四边形</span><br><span class="line">        this.parallelogram()</span><br><span class="line">        break</span><br><span class="line">      case &#39;coordinate&#39;: &#x2F;&#x2F; 坐标系</span><br><span class="line">        this.coordinate()</span><br><span class="line">        break</span><br><span class="line">      case &#39;axis&#39;: &#x2F;&#x2F; 数轴</span><br><span class="line">        this.axis()</span><br><span class="line">        break</span><br><span class="line">      case &#39;cube&#39;: &#x2F;&#x2F; 立方体</span><br><span class="line">        this.cube()</span><br><span class="line">        break</span><br><span class="line">      case &#39;cylinder&#39;: &#x2F;&#x2F; 圆柱体</span><br><span class="line">        this.cylinder()</span><br><span class="line">        break</span><br><span class="line">      case &#39;cone&#39;: &#x2F;&#x2F; 圆锥体</span><br><span class="line">        this.cone()</span><br><span class="line">        break</span><br><span class="line">    &#125;</span><br><span class="line">    this.ctxTemp.restore()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default OriginShape</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;几何图形&quot;&gt;&lt;a href=&quot;#几何图形&quot; class=&quot;headerlink&quot; title=&quot;几何图形&quot;&gt;&lt;/a&gt;几何图形&lt;/h1&gt;&lt;h2 id=&quot;几何图形绘制&quot;&gt;&lt;a href=&quot;#几何图形绘制&quot; class=&quot;headerlink&quot; title=&quot;几何图形绘
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="canvas" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/canvas/"/>
    
    
      <category term="canvas" scheme="https://onenotmind.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>笔记点选和圈选</title>
    <link href="https://onenotmind.github.io/2020/05/23/canvas-choose/"/>
    <id>https://onenotmind.github.io/2020/05/23/canvas-choose/</id>
    <published>2020-05-23T06:57:44.375Z</published>
    <updated>2020-05-23T06:57:44.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="笔记点选和圈选"><a href="#笔记点选和圈选" class="headerlink" title="笔记点选和圈选"></a>笔记点选和圈选</h1><hr><h2 id="笔记的数据化和笔记选择含义"><a href="#笔记的数据化和笔记选择含义" class="headerlink" title="笔记的数据化和笔记选择含义"></a>笔记的数据化和笔记选择含义</h2><blockquote><p>对于每一条笔记，在数据层面，只要储存笔记的点的数组（点是有序的）且知道每个点的连接方式（直线，贝赛尔曲线连接等）就可以还原出该条笔记。</p></blockquote><p>所以，对于笔记的选择，只要判断所选区域里是否含有点数组中的某一点，即可判定在所选区域内。</p><h2 id="笔记圈选"><a href="#笔记圈选" class="headerlink" title="笔记圈选"></a>笔记圈选</h2><h4 id="所选区域"><a href="#所选区域" class="headerlink" title="所选区域"></a>所选区域</h4><p>笔记圈选的所选区域其实是该条曲线绘制后，首尾点连接后canvas判定的区域。</p><h4 id="笔记圈选区域的简单判断"><a href="#笔记圈选区域的简单判断" class="headerlink" title="笔记圈选区域的简单判断"></a>笔记圈选区域的简单判断</h4><p>我们知道，每一条笔记里储存的点的量都是很大的，有些甚至能到上万点，而我们需要对每一条笔记都进行判断，所以，非常耗性能，那我们是否能进行一些简单的预判断，来处理一些笔记容易判断的情况呢？</p><p>我们知道，每一天笔记都可以用一个矩形包围起来，矩形的可以通过遍历这些点获取，矩形的左上点为((left)min, (top)min)即所有点的left，top值最小值时的点，矩形的右下角点为((right)max, bottom(max))</p><p>所以，假设两个笔记的外矩形不想交，则证明两条笔记肯定不相交。</p><h4 id="使用ctx-isPointInPath-x-y-来判断"><a href="#使用ctx-isPointInPath-x-y-来判断" class="headerlink" title="使用ctx.isPointInPath(x, y)来判断"></a>使用ctx.isPointInPath(x, y)来判断</h4><p>在 canvas 中，我们可以使用ctx.isPointInPath(x, y)来判断点是否在当前ctx围成的区域中。</p><p><font color=#D4B51B>注意：ctx.isPointInPath(x, y)判断的区域指的是当前最后一条路径（即最后一次beginPath()）的最后一次子路径（即最后一次moveTo()）围城的区域,同时ctx.scale不能设置成倍数，否则得进行其他处理</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 框选处理</span><br><span class="line">handleChoosePen () &#123;</span><br><span class="line">  &#x2F;&#x2F; this.eles 储存当前笔记的数组，每一个元素就是一条笔记（一条笔记是一个对象）</span><br><span class="line">  if (this.eles.length &lt; 1) return</span><br><span class="line">  &#x2F;&#x2F; 获取框选的笔记,</span><br><span class="line">  let chooseZone &#x3D; this.eles.pop()</span><br><span class="line">  &#x2F;&#x2F; this.historyIndex记录当前显示笔记的index</span><br><span class="line">  this.historyIndex &#x3D; this.eles.length - 1</span><br><span class="line">  if (chooseZone.drawPoints.length &lt; 1) return</span><br><span class="line">  let choosedEleIdxArr &#x3D; [] &#x2F;&#x2F; 被选中的笔记index</span><br><span class="line">  let choosedEleZoomOpt &#x3D; null &#x2F;&#x2F; 被选中的区域框</span><br><span class="line">  &#x2F;&#x2F; 点选，点选的话就是将当前点为中心的一个正方形区域</span><br><span class="line">  if (chooseZone.drawPoints.length &lt;&#x3D; 10) &#123;</span><br><span class="line">    this.clear(this.ctxTemp, this.canvTemp)</span><br><span class="line">    let clickPoint &#x3D; chooseZone.drawPoints[0]</span><br><span class="line">    let baseRect &#x3D; 20</span><br><span class="line">    this.ctxTemp.beginPath()</span><br><span class="line">    this.ctxTemp.moveTo(clickPoint.x - baseRect &#x2F; 2, clickPoint.y - baseRect &#x2F; 2)</span><br><span class="line">    this.ctxTemp.lineTo(clickPoint.x - baseRect &#x2F; 2, clickPoint.y + baseRect &#x2F; 2)</span><br><span class="line">    this.ctxTemp.lineTo(clickPoint.x + baseRect &#x2F; 2, clickPoint.y + baseRect &#x2F; 2)</span><br><span class="line">    this.ctxTemp.lineTo(clickPoint.x + baseRect &#x2F; 2, clickPoint.y - baseRect &#x2F; 2)</span><br><span class="line">    this.ctxTemp.fill()</span><br><span class="line">    let arr &#x3D; [</span><br><span class="line">      &#123;</span><br><span class="line">        x: clickPoint.x - baseRect &#x2F; 2,</span><br><span class="line">        y: clickPoint.y - baseRect &#x2F; 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        x: clickPoint.x - baseRect &#x2F; 2,</span><br><span class="line">        y: clickPoint.y + baseRect &#x2F; 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        x: clickPoint.x + baseRect &#x2F; 2,</span><br><span class="line">        y: clickPoint.y + baseRect &#x2F; 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        x: clickPoint.x + baseRect &#x2F; 2,</span><br><span class="line">        y: clickPoint.y - baseRect &#x2F; 2</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">    chooseZone.drawPoints &#x3D; arr</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 圈选</span><br><span class="line">  let chooseZoneInfo &#x3D; this.getPenOuterZone(chooseZone.drawPoints)</span><br><span class="line">  let shapePoint &#x3D; new ShapePoint()</span><br><span class="line">  for (let i &#x3D; 0; i &lt; this.eles.length; i++) &#123;</span><br><span class="line">    let tmpEle &#x3D; this.eles[i]</span><br><span class="line">    &#x2F;&#x2F; 检测当前笔记是几何图形</span><br><span class="line">    if (tmpEle.type &#x3D;&#x3D;&#x3D; &#39;shape&#39;) &#123;</span><br><span class="line">      &#x2F;&#x2F; 获取几何图形的点，通过线获取点</span><br><span class="line">      let shapeArr &#x3D; shapePoint._getShapePoints(tmpEle.config.type, tmpEle.config.start, tmpEle.config.end)</span><br><span class="line">      tmpEle.drawPoints &#x3D; shapeArr</span><br><span class="line">    &#125;</span><br><span class="line">    if (tmpEle.type &#x3D;&#x3D;&#x3D; &#39;pen&#39; || tmpEle.type &#x3D;&#x3D;&#x3D; &#39;shape&#39;) &#123;</span><br><span class="line">      &#x2F;&#x2F; 获取每一个笔记的外框</span><br><span class="line">      const info &#x3D; this.getPenOuterZone(tmpEle.drawPoints)</span><br><span class="line">      &#x2F;&#x2F; 判断选中区域的外框与笔记外框是否相交</span><br><span class="line">      if (this.isRectOverlap(chooseZoneInfo, info)) &#123;</span><br><span class="line">        &#x2F;&#x2F; 对每一个点进行检测</span><br><span class="line">        for (let j &#x3D; 0; j &lt; tmpEle.drawPoints.length; j++) &#123;</span><br><span class="line">          let point &#x3D; tmpEle.drawPoints[j]</span><br><span class="line">          &#x2F;&#x2F; 判断点是否在选中区域的外框，如果在外框中则使用isPointInPath判断</span><br><span class="line">          if (this.isPointInRect(point, chooseZoneInfo) &amp;&amp; this.ctxTemp.isPointInPath(point.x, point.y)) &#123;</span><br><span class="line">            console.warn(&#96;第$&#123;i + 1&#125;笔被选中&#96;)</span><br><span class="line">            choosedEleIdxArr.push(i)</span><br><span class="line">            break</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  this.clear(this.ctxTemp, this.canvTemp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取笔记的外方框</span><br><span class="line">getPenOuterZone (pointList &#x3D; []) &#123;</span><br><span class="line">  if (pointList.length &lt; 1) return null</span><br><span class="line">  let left &#x3D; pointList[0].x</span><br><span class="line">  let right &#x3D; pointList[0].x</span><br><span class="line">  let top &#x3D; pointList[0].y</span><br><span class="line">  let bottom &#x3D; pointList[0].y</span><br><span class="line">  for (let i &#x3D; 1; i &lt; pointList.length; i++) &#123;</span><br><span class="line">    if (pointList[i].x &lt; left) &#123;</span><br><span class="line">      left &#x3D; pointList[i].x</span><br><span class="line">    &#125;</span><br><span class="line">    if (pointList[i].x &gt; right) &#123;</span><br><span class="line">      right &#x3D; pointList[i].x</span><br><span class="line">    &#125;</span><br><span class="line">    if (pointList[i].y &lt; top) &#123;</span><br><span class="line">      top &#x3D; pointList[i].y</span><br><span class="line">    &#125;</span><br><span class="line">    if (pointList[i].y &gt; bottom) &#123;</span><br><span class="line">      bottom &#x3D; pointList[i].y</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; if (top &lt;&#x3D; bottom || left &lt;&#x3D; right) &#123;</span><br><span class="line">  &#x2F;&#x2F;   return null</span><br><span class="line">  &#x2F;&#x2F; &#125;</span><br><span class="line">  return &#123;</span><br><span class="line">    left: left,</span><br><span class="line">    right: right,</span><br><span class="line">    top: top,</span><br><span class="line">    bottom: bottom</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 判断两个方框是否相交</span><br><span class="line">isRectOverlap (r1, r2) &#123;</span><br><span class="line">  return !(((r1.right &lt; r2.left) || (r1.bottom &lt; r2.top)) || ((r2.right &lt; r1.left) || (r2.bottom &lt; r1.top)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 判断点是否在方框里</span><br><span class="line">isPointInRect (point, r) &#123;</span><br><span class="line">  return ((point.x &gt;&#x3D; r.left) &amp;&amp; (point.x &lt;&#x3D; r.right) &amp;&amp; (point.y &gt;&#x3D; r.top) &amp;&amp; (point.y &lt;&#x3D; r.bottom))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;笔记点选和圈选&quot;&gt;&lt;a href=&quot;#笔记点选和圈选&quot; class=&quot;headerlink&quot; title=&quot;笔记点选和圈选&quot;&gt;&lt;/a&gt;笔记点选和圈选&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;笔记的数据化和笔记选择含义&quot;&gt;&lt;a href=&quot;#笔记的数据化和笔记选择含义&quot; 
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="canvas" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/canvas/"/>
    
    
      <category term="canvas" scheme="https://onenotmind.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>画笔</title>
    <link href="https://onenotmind.github.io/2020/05/23/canvas-pen/"/>
    <id>https://onenotmind.github.io/2020/05/23/canvas-pen/</id>
    <published>2020-05-23T06:57:44.375Z</published>
    <updated>2020-05-23T06:57:44.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="画笔"><a href="#画笔" class="headerlink" title="画笔"></a>画笔</h1><hr><h2 id="添加事件监听"><a href="#添加事件监听" class="headerlink" title="添加事件监听"></a>添加事件监听</h2><p>实现画笔功能，最基础就是得到鼠标（或者触摸）的点，所以，我们得先添加事件监听来获取点的数组。</p><p>对于鼠标来说，我们常常使用mouse相关事件，对于可触摸屏来说，我们常常使用touch事件，其实，可以使用point事件它对于鼠标和触摸屏都可以兼容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.canv.addEventListener(&#39;pointerdown&#39;, this.drawBegin.bind(this))</span><br><span class="line">this.canv.addEventListener(&#39;pointermove&#39;, this.drawing.bind(this), &#123; passive: true &#125;)</span><br><span class="line">this.canv.addEventListener(&#39;pointerup&#39;, this.drawEnd.bind(this))</span><br></pre></td></tr></table></figure><h2 id="绘制简单路径"><a href="#绘制简单路径" class="headerlink" title="绘制简单路径"></a>绘制简单路径</h2><h4 id="获取点和过滤点"><a href="#获取点和过滤点" class="headerlink" title="获取点和过滤点"></a>获取点和过滤点</h4><p>对于点的处理，我们单独对点封装成一个类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export default class Point &#123;</span><br><span class="line">  constructor (x, y) &#123;</span><br><span class="line">    this.x &#x3D; x &#x2F;&#x2F; x坐标</span><br><span class="line">    this.y &#x3D; y &#x2F;&#x2F; y坐标</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="直线绘制和曲线绘制"><a href="#直线绘制和曲线绘制" class="headerlink" title="直线绘制和曲线绘制"></a>直线绘制和曲线绘制</h4><p>有了封装的点的类，接下来，我们来对画笔的基础处理进行一个封装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class ElementBase &#123;</span><br><span class="line">  constructor () &#123;</span><br><span class="line">    this.pointList &#x3D; [] &#x2F;&#x2F; 绘制的点的数组</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，我们来封装一个获取点的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">_getPoint (event) &#123;</span><br><span class="line">  return new Point(event.layerX, event.layerY)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">  * 添加过滤之后的采样点</span><br><span class="line">  * @param &#123;Point&#125; point 点</span><br><span class="line">  * @returns &#123;number&#125; 如果成功添加采样点，返回过滤后采样点数组长度，否则返回-1</span><br><span class="line">  *&#x2F;</span><br><span class="line">_addPoint (point) &#123;</span><br><span class="line">  if (this._pointFilter(point)) &#123;</span><br><span class="line">    this.pointList.push(point)</span><br><span class="line">    return this.pointList.length</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return -1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们应该还需要一个点过滤器，防止画笔不动时，同样的点不断被添加到该数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">  * 点过滤器</span><br><span class="line">  * @param &#123;Point&#125; point 点</span><br><span class="line">  * @returns &#123;Boolean&#125; 返回是否被过滤，true表示不过滤，false表示被过滤</span><br><span class="line">  *&#x2F;</span><br><span class="line">_pointFilter (point) &#123;</span><br><span class="line">  if (this.pointList.length &#x3D;&#x3D;&#x3D; 0) return true</span><br><span class="line">  const lastPoint &#x3D; this.pointList[this.pointList.length - 1]</span><br><span class="line">  if (point.x &#x3D;&#x3D;&#x3D; lastPoint.x &amp;&amp; point.y &#x3D;&#x3D;&#x3D; lastPoint.y) &#123;</span><br><span class="line">    return false</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这些点，我们封装一些常见的绘制方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">  * 绘制一个点</span><br><span class="line">  * @param &#123;Point&#125; point 点</span><br><span class="line">  *&#x2F;</span><br><span class="line">_renderPoint (ctx, &#123; color, width &#125;) &#123;</span><br><span class="line">  ctx.fillStyle &#x3D; color</span><br><span class="line">  ctx.beginPath()</span><br><span class="line">  ctx.arc(this.pointList[0].x, this.pointList[0].y, width &#x2F; 2, 0, 2 * Math.PI, true)</span><br><span class="line">  ctx.fill()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">  * 绘制一个路径</span><br><span class="line">  * @param pointList 点的集合</span><br><span class="line">  *&#x2F;</span><br><span class="line">_renderPath (ctx, &#123; color, width &#125;) &#123;</span><br><span class="line">  ctx.strokeStyle &#x3D; color</span><br><span class="line">  ctx.lineWidth &#x3D; width</span><br><span class="line">  ctx.lineCap &#x3D; &#39;round&#39;</span><br><span class="line">  ctx.lineJoin &#x3D; &#39;round&#39;</span><br><span class="line">  let endIndex &#x3D; this.pointList.length - 1</span><br><span class="line">  for (let i &#x3D; this.from; i &lt; endIndex; i++) &#123;</span><br><span class="line">    if (i &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line">      const middlePoint &#x3D; this._getMiddlePoint(this.pointList[i], this.pointList[i + 1])</span><br><span class="line">      this._renderLineTo(ctx, this.pointList[i], middlePoint)</span><br><span class="line">    &#125; else if (i &#x3D;&#x3D;&#x3D; endIndex) &#123;</span><br><span class="line">      if (this.finish) &#123;</span><br><span class="line">        const middlePoint &#x3D; this._getMiddlePoint(</span><br><span class="line">          this.pointList[i - 1],</span><br><span class="line">          this.pointList[i]</span><br><span class="line">        )</span><br><span class="line">        this._renderLineTo(ctx, this.pointList[i], middlePoint)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      this._renderQuadraticCurve(</span><br><span class="line">        ctx,</span><br><span class="line">        this.pointList[i - 1],</span><br><span class="line">        this.pointList[i],</span><br><span class="line">        this.pointList[i + 1]</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;**</span><br><span class="line">  * 绘制一条直线</span><br><span class="line">  * @param &#123;Point&#125; p1 点</span><br><span class="line">  * @param &#123;Point&#125; p2 点</span><br><span class="line">  *&#x2F;</span><br><span class="line">_renderLineTo (ctx, p1, p2) &#123;</span><br><span class="line">  ctx.beginPath()</span><br><span class="line">  ctx.moveTo(p1.x, p1.y)</span><br><span class="line">  ctx.lineTo(p2.x, p2.y)</span><br><span class="line">  ctx.stroke()</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;**</span><br><span class="line">  * 获取中点</span><br><span class="line">  * @param &#123;Point&#125; p1 点</span><br><span class="line">  * @param &#123;Point&#125; p2 点</span><br><span class="line">  *&#x2F;</span><br><span class="line">_getMiddlePoint (p1, p2) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    x: Math.floor((p1.x + p2.x) &#x2F; 2),</span><br><span class="line">    y: Math.floor((p1.y + p2.y) &#x2F; 2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;**</span><br><span class="line">  * 绘制一条二次贝塞尔曲线，根据连续三个点，绘制中间的贝塞尔曲线</span><br><span class="line">  * @param &#123;Point&#125; p1 点</span><br><span class="line">  * @param &#123;Point&#125; p2 点</span><br><span class="line">  * @param &#123;Point&#125; p3 点</span><br><span class="line">  *&#x2F;</span><br><span class="line">_renderQuadraticCurve (ctx, p1, p2, p3) &#123;</span><br><span class="line">  let preMiddelPoint &#x3D; this._getMiddlePoint(p1, p2)</span><br><span class="line"></span><br><span class="line">  let lastMiddelPoint &#x3D; this._getMiddlePoint(p2, p3)</span><br><span class="line"></span><br><span class="line">  let controlPoint &#x3D; p2</span><br><span class="line">  ctx.beginPath()</span><br><span class="line">  ctx.moveTo(preMiddelPoint.x, preMiddelPoint.y)</span><br><span class="line">  ctx.quadraticCurveTo(</span><br><span class="line">    controlPoint.x,</span><br><span class="line">    controlPoint.y,</span><br><span class="line">    lastMiddelPoint.x,</span><br><span class="line">    lastMiddelPoint.y</span><br><span class="line">  )</span><br><span class="line">  ctx.stroke()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="笔记优化"><a href="#笔记优化" class="headerlink" title="笔记优化"></a>笔记优化</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;画笔&quot;&gt;&lt;a href=&quot;#画笔&quot; class=&quot;headerlink&quot; title=&quot;画笔&quot;&gt;&lt;/a&gt;画笔&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;添加事件监听&quot;&gt;&lt;a href=&quot;#添加事件监听&quot; class=&quot;headerlink&quot; title=&quot;添加事件监听&quot;&gt;
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="canvas" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/canvas/"/>
    
    
      <category term="canvas" scheme="https://onenotmind.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>canvas基础</title>
    <link href="https://onenotmind.github.io/2020/05/23/canvas-base/"/>
    <id>https://onenotmind.github.io/2020/05/23/canvas-base/</id>
    <published>2020-05-23T06:57:44.374Z</published>
    <updated>2020-05-23T06:57:44.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="canvas基础"><a href="#canvas基础" class="headerlink" title="canvas基础"></a>canvas基础</h1><hr><h2 id="初始化画布"><a href="#初始化画布" class="headerlink" title="初始化画布"></a>初始化画布</h2><p>在html中声明画布，本例中画布的长为 1366px 宽为 768px (可根据需求自定义)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id&#x3D;&quot;canvas&quot; style&#x3D;&quot;width: 1366px; height: 768px;&quot;&gt;&lt;&#x2F;canvas&gt;</span><br></pre></td></tr></table></figure><p>在 js 中初始化画布</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let canv &#x3D; document.getElementById(&#39;canvas&#39;) &#x2F;&#x2F; 获取canvas dom对象</span><br><span class="line">let ctx &#x3D; canv.getContext(&#39;2d&#39;) &#x2F;&#x2F; 得到 canvas CanvasRenderingContext2D对象，对画布的操作基本都是基于ctx来的</span><br></pre></td></tr></table></figure><h2 id="绘制路径"><a href="#绘制路径" class="headerlink" title="绘制路径"></a>绘制路径</h2><blockquote><p>图形的基本元素是路径，路径是通过不同颜色和宽度的线段或曲线相连形成的不同形状的点的集合。</p></blockquote><p><font color=#D4B51B>路径的绘制步骤？</font><br></p><ol><li>首先，你需要创建路径起始点(beginPath(), moveTo())</li><li>然后你使用画图命令去画出路径(lineTo(), arcTo()等)</li><li>把路径封闭(不是必须的)(closePath())</li><li>一旦路径生成，你就能通过描边或填充路径区域来渲染图形(fill, stroke)</li></ol><p>我们来一一说下这几个绘图常用的api</p><p><code>beginPath()</code> 新建一条路径</p><p><code>moveTo(x, y)</code> 在当前路径下新建一条子路径，并将笔触移动到指定的坐标x以及y上</p><p><code>lineTo(x, y)</code> 绘制一条从当前位置到指定x以及y位置的直线</p><p><code>arc(x, y, radius, startAngle, endAngle, anticlockwise)</code> 画一个以（x,y）为圆心的以radius为半径的圆弧（圆），从startAngle开始到endAngle结束，按照anticlockwise给定的方向（默认为顺时针）来生成</p><p><code>quadraticCurveTo(cp1x, cp1y, x, y)</code> 绘制二次贝塞尔曲线，cp1x,cp1y为一个控制点，x,y为结束点</p><p><code>bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)</code> 绘制三次贝塞尔曲线，cp1x,cp1y为控制点一，cp2x,cp2y为控制点二，x,y为结束点</p><p><code>stroke()</code> 通过线条来绘制图形轮廓</p><p><code>fill()</code> 通过填充路径的内容区域生成实心的图形</p><p>比如我们要绘制一个实心三角形，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function draw() &#123;</span><br><span class="line">  var canvas &#x3D; document.getElementById(&#39;canvas&#39;);</span><br><span class="line">  if (canvas.getContext) &#123;</span><br><span class="line">    var ctx &#x3D; canvas.getContext(&#39;2d&#39;);</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.moveTo(75, 50);</span><br><span class="line">    ctx.lineTo(100, 75);</span><br><span class="line">    ctx.lineTo(100, 25);</span><br><span class="line">    ctx.fill(); &#x2F;&#x2F; 填充图形区域</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Path2D 对象 – Path2D()会返回一个新初始化的Path2D对象（可能将某一个路径作为变量——创建一个它的副本，或者将一个包含SVG path数据的字符串作为变量）</p></blockquote><h2 id="样式设置"><a href="#样式设置" class="headerlink" title="样式设置"></a>样式设置</h2><blockquote><p>色彩 如果我们想要给图形上色，有两个重要的属性可以做到：fillStyle 和 strokeStyle</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.fillStyle &#x3D; &quot;rgb(255,165,0)&quot;; &#x2F;&#x2F; 填充颜色值</span><br><span class="line">ctx.strokeStyle &#x3D; &quot;rgba(255,165,0,1)&quot;; &#x2F;&#x2F; 边框颜色值</span><br></pre></td></tr></table></figure><p>我们用下面的方法新建一个 canvasGradient 对象，并且赋给图形的 fillStyle 或 strokeStyle 属性，实现线性或者径向的渐变</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var lingrad2 &#x3D; ctx.createLinearGradient(0,50,0,95);</span><br><span class="line">lingrad2.addColorStop(0.5, &#39;#000&#39;);</span><br><span class="line">lingrad2.addColorStop(1, &#39;rgba(0,0,0,0)&#39;);</span><br><span class="line">ctx.strokeStyle &#x3D; lingrad2;</span><br></pre></td></tr></table></figure><p>也可以使用图案的应用跟渐变很类似的，创建出一个 pattern 之后，赋给 fillStyle 或 strokeStyle 属性即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var img &#x3D; new Image();</span><br><span class="line">img.src &#x3D; &#39;someimage.png&#39;;</span><br><span class="line">var ptrn &#x3D; ctx.createPattern(img,&#39;repeat&#39;);</span><br><span class="line">ctx.fillStyle &#x3D; ptrn;</span><br></pre></td></tr></table></figure><blockquote><p>线条样式 通过lineTo() arc()等绘制路径的api所绘制的线条都受它的影响</p></blockquote><p><code>lineWidth = value</code>  线条的宽度</p><p><code>lineCap = type type=[butt, round, square]</code> 线条尾端的样式</p><p><code>lineJoin = type type=[round, bevel, miter]</code> 设定线条与线条间接合处的样式</p><p><code>setLineDash(segments)</code> 设置当前虚线样式</p><h2 id="save-与-restore"><a href="#save-与-restore" class="headerlink" title="save() 与 restore()"></a>save() 与 restore()</h2><h2 id="两层画布"><a href="#两层画布" class="headerlink" title="两层画布"></a>两层画布</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;canvas基础&quot;&gt;&lt;a href=&quot;#canvas基础&quot; class=&quot;headerlink&quot; title=&quot;canvas基础&quot;&gt;&lt;/a&gt;canvas基础&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;初始化画布&quot;&gt;&lt;a href=&quot;#初始化画布&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="canvas" scheme="https://onenotmind.github.io/categories/web%E5%89%8D%E7%AB%AF/canvas/"/>
    
    
      <category term="canvas" scheme="https://onenotmind.github.io/tags/canvas/"/>
    
  </entry>
  
</feed>
